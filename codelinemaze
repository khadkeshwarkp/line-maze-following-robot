#define leftCenterSensor   A2
#define leftNearSensor     A1
#define leftFarSensor      A0
#define rightCenterSensor  A3
#define rightNearSensor    A4
#define rightFarSensor     A5

const int trigPin = 3;
const int echoPin = 4;
long duration;
long distance;

int leftCenterReading;
int leftNearReading;
int leftFarReading;
int rightCenterReading;
int rightNearReading;
int rightFarReading;

int leftNudge;
int replaystage;
int rightNudge;
int v=90,s=100;

#define leapTime 200

#define leftMotor1  6
#define leftMotor2  5

#define rightMotor1 9
#define rightMotor2 10

#define led 13

char path[30] = {};
int pathLength;
int readLength;

void setup(){
  
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600);
  
  pinMode(leftCenterSensor, INPUT);
  pinMode(leftNearSensor, INPUT);
  pinMode(leftFarSensor, INPUT);
  pinMode(rightCenterSensor, INPUT);
  pinMode(rightNearSensor, INPUT);
  pinMode(rightFarSensor, INPUT);
    
  pinMode(leftMotor1, OUTPUT);
  pinMode(leftMotor2, OUTPUT);
  pinMode(rightMotor1, OUTPUT);
  pinMode(rightMotor2, OUTPUT);
  pinMode(led, OUTPUT);
  Serial.begin(115200);
  digitalWrite(led, LOW);
  delay(700);
}


void loop(){
  
 readSensors();                                                                                     
 
 if(leftFarReading>500 && rightFarReading>500 && (leftCenterReading<500 || rightCenterReading<500) &&(distance > 9)) //if only the middle two sensors can see the black line
 { 
    straight();//Moves straight                                                                                      
 }
 else//otherwise goes to the leftHandWall method
 {                                                                                              
    leftHandWall();                                                                                   
 }

}

void readSensors()//accepts input from sensors
{

  
 digitalWrite(trigPin, LOW);  // Added this line
  delayMicroseconds(2); // Added this line
  digitalWrite(trigPin, HIGH);
//  delayMicroseconds(1000); - Removed this line
  delayMicroseconds(10); // Added this line
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration/2) / 29.1;
  
  leftCenterReading  = analogRead(leftCenterSensor);
  leftNearReading    = analogRead(leftNearSensor);
  leftFarReading     = analogRead(leftFarSensor);
  rightCenterReading = analogRead(rightCenterSensor);  
  rightNearReading   = analogRead(rightNearSensor);
  rightFarReading    = analogRead(rightFarSensor);  

Serial.println(leftFarReading);
Serial.println(leftNearReading);
Serial.println(leftCenterReading);
Serial.println(rightCenterReading);
Serial.println(rightNearReading);
Serial.println(rightFarReading);
}


void leftHandWall(){
  readSensors();
  

  if( leftFarReading<500 && rightFarReading<500 && (distance >7))//indicates either 3way intersection or end of maze
  {
    runfor(v);
    delay(200);
    readSensors();
    
    if((leftFarReading<500 && rightFarReading<500 && leftNearReading<500 && rightNearReading<500 && leftCenterReading<500 && rightCenterReading<500 &&(distance >7)))//if it moves forward and still sees all black, maze is done
    {
      done();
    }
    if(leftFarReading>500 && rightFarReading>500 && distance >7)//otherwise it turns left
    { 
      turnLeft();
    }
    
  }
  readSensors();
  
   if((leftFarReading<500 || leftNearReading<500)&&(distance >7))//indicates that a left turn is possible
  { 
    runfor(v);
    delay(leapTime-50);
    halt();
   delay(1);
   
    readSensors();
      
      if(leftFarReading>500 || rightFarReading>500 &&(distance >7))//checks to make sure maze isn't done
      {
        turnLeft();
      }
      readSensors();
    if((leftFarReading<500 && rightFarReading<500 && leftNearReading<500 && rightNearReading<500 && leftCenterReading<500 && rightCenterReading<500 &&(distance >7)))//if it moves forward and still sees all black, maze is done
    {
      done();
    }
  }
  readSensors();
   
  if(rightFarReading<500 &&(distance >7))//indicates a right turn is possible
  {

    runfor(v);
    delay(50);//CHANGED FROM 30 to 10
    readSensors();
    
    if((leftFarReading<500 || leftNearReading<500 )&&(distance >7))//left turn is also possible
    {
      delay(leapTime-30);
      readSensors();
      
    if((leftFarReading<500 && rightFarReading<500 && leftNearReading<500 && rightNearReading<500 && leftCenterReading<500 && rightCenterReading<500 &&(distance >7)))//if it moves forward and still sees all black, maze is done
    {
      done();
    }
      else//make the left turn
      {
        turnLeft();
        return;
      }
   }
    delay(leapTime+30);
    readSensors();
    if(leftFarReading>500 && leftCenterReading>500 &&
      rightCenterReading>500 && rightFarReading>500 && distance>7)
      {
      turnRight();
      return;
    }
    path[pathLength]='S';
    Serial.println("s");
    pathLength++;
    Serial.print("Path length: ");
    Serial.println(pathLength);
    if(path[pathLength-2]=='B'){
    Serial.println("shortening path");
    shortPath();
     }
    straight();
  }
  readSensors();
  if(leftFarReading>500 && leftCenterReading>500 && rightCenterReading>500 
    && rightFarReading>500 || (distance <7))
  {
    turnAround();
  }
  
  
}
void done(){
  halt();
  replaystage=1;
  path[pathLength]='D';
  pathLength++;
 while(analogRead(leftFarSensor)<500){
   digitalWrite(led, HIGH);
   delay(170);
   digitalWrite(led, HIGH);
   delay(170);
 }
 delay(7000);
  replay();
}

void turnLeft(){

    runleft(v);
    delay(70);
 
 
  while(analogRead(rightCenterSensor)<500||analogRead(leftCenterSensor)>500)
  {
    runleft(v);
    delay(2);
    
    halt();
    delay(1);
  }
    
  while(analogRead(rightCenterSensor)>500){
    runleft(v);
    delay(2);
    halt();
    delay(1);
  }
 
  if(replaystage==0){
    path[pathLength]='L';
    //Serial.println("l");
    pathLength++;
    //Serial.print("Path length: ");
    //Serial.println(pathLength);
      if(path[pathLength-2]=='B'){
        //Serial.println("shortening path");
        shortPath();
      }
  }
}

void turnRight(){
    
   halt();
   delay(1);

    runright(v);
    delay(50);

  while(analogRead(rightCenterSensor)<500){
    runright(v);
    delay(2);
    halt();
    delay(1);
  }
   while(analogRead(rightCenterSensor)>500){
    runright(v);
    delay(2);
    halt();
    delay(1);
  }
   while(analogRead(leftCenterSensor)>500){
    runright(v);
    delay(2);
    halt();
    delay(1);
  }
  
  
  if(replaystage==0){
  path[pathLength]='R';
  Serial.println("r");
  pathLength++;
  Serial.print("Path length: ");
  Serial.println(pathLength);
    if(path[pathLength-2]=='B'){
      Serial.println("shortening path");
      shortPath();
    }
  }
  
 
}

void straight(){
while( analogRead(leftNearSensor)<500 && analogRead(leftCenterSensor)<500){
      analogWrite(leftMotor1,30);
      analogWrite(leftMotor2, 0);
      analogWrite(rightMotor1, 100);
      analogWrite(rightMotor2, 0);
      delay(5);
      /*analogWrite(leftMotor1, 100);
      analogWrite(leftMotor2, 0);
     analogWrite(rightMotor1, 30);
      analogWrite(rightMotor2, 0);
    delay(1);*/
    return;
  }
  while(analogRead(rightNearSensor)<500 && analogRead(rightCenterSensor)<500){
      analogWrite(leftMotor1, 100);
     analogWrite(leftMotor2, 0);
      analogWrite(rightMotor1,30 );
      analogWrite(rightMotor2, 0);
      delay(5);
      /*analogWrite(leftMotor1, 0);
      analogWrite(leftMotor2, 0);
    analogWrite(rightMotor1, 70);
      analogWrite(rightMotor2, 0);
    delay(1);*/
    return;
  }

  
    runfor(s);
    delay(1);
      /*analogWrite(leftMotor1, 0);
      analogWrite(leftMotor2, 0);
      analogWrite(rightMotor1, 0);
      analogWrite(rightMotor2, 0);
    delay(1);*/
  
}

void turnAround()
{  readSensors();    
      runright(65); 
      delay(90);
 
     while((analogRead(leftCenterSensor)>500) &&  (analogRead(rightCenterSensor)>500))
      {runright(70);}
    delay(10);
    
    halt();
  delay(5);
      halt();
 
delay(70); 
  path[pathLength]='B';
  pathLength++;
  straight();
}

void shortPath(){
 int shortDone=0;
  if(path[pathLength-3]=='L' && path[pathLength-1]=='R'){
    pathLength-=3;
    path[pathLength]='B';
    //Serial.println("test1");
    shortDone=1;
  }
   
  if(path[pathLength-3]=='L' && path[pathLength-1]=='S' && shortDone==0){
    pathLength-=3;
    path[pathLength]='R';
    //Serial.println("test2");
    shortDone=1;
  }
   
  if(path[pathLength-3]=='R' && path[pathLength-1]=='L' && shortDone==0){
    pathLength-=3;
    path[pathLength]='B';
    //Serial.println("test3");
    shortDone=1;
  }
  
   
  if(path[pathLength-3]=='S' && path[pathLength-1]=='L' && shortDone==0){
    pathLength-=3;
    path[pathLength]='R';
    //Serial.println("test4");
    shortDone=1;
  }
     
  if(path[pathLength-3]=='S' && path[pathLength-1]=='S' && shortDone==0){
    pathLength-=3;
    path[pathLength]='B';
    //Serial.println("test5");
    shortDone=1;
  }
    if(path[pathLength-3]=='L' && path[pathLength-1]=='L' && shortDone==0){
    pathLength-=3;
    path[pathLength]='S';
    //Serial.println("test6");
    shortDone=1;
  }
  
  path[pathLength+1]='D';
  path[pathLength+2]='D';
  pathLength++;

}

void printPath(){
  Serial.println("+++++++++++++++++");
  int x;
  while(x<=pathLength){
  Serial.println(path[x]);
  x++;
  }
  Serial.println("+++++++++++++++++");
}


void replay(){
   readSensors();
  if(leftFarReading>500 && rightFarReading>500){
    straight();
  }
  else{
    if(path[readLength]=='D'){
    runfor(s);
    delay(70);
      //endMotion();
    }
    if(path[readLength]=='L'){
    runfor(s);
    delay(leapTime);
      turnLeft();
    }
    if(path[readLength]=='R'){
    runfor(s);
    delay(leapTime);
    turnRight();
    }
    if(path[readLength]=='S'){
      runfor(v);
      delay(200);
      halt();
      delay(20);
        while(analogRead(leftCenterSensor) > 500 || analogRead (rightCenterSensor) >500)
        {
          runright(60);
          delay(2);
        }
      straight();
    }
    
    if(leftCenterReading<500 && rightCenterReading<500 && leftNearReading<500 && rightNearReading<500 && leftFarReading<500 && rightFarReading<500)
    {
      halt();
      delay(10000);
      
      }
    
    readLength++;
  }
    
  replay();
  
}

     void runfor(int v)
      {
      analogWrite(leftMotor1, v);
      analogWrite(leftMotor2, 0);
      analogWrite(rightMotor1, v);
      analogWrite(rightMotor2, 0);
      }
      
      void runleft(int v)
      {
      analogWrite(leftMotor1, 0);
      analogWrite(leftMotor2, v);
      analogWrite(rightMotor1, v);
      analogWrite(rightMotor2, 0);
      }
      void runright(int v)
      {
      analogWrite(leftMotor1, v);
      analogWrite(leftMotor2, 0);
      analogWrite(rightMotor1, 0);
      analogWrite(rightMotor2, v);
      }
      void halt()
      {
      analogWrite(leftMotor1, 0);
      analogWrite(leftMotor2, 0);
      analogWrite(rightMotor1, 0);
      analogWrite(rightMotor2, 0);        
      }
